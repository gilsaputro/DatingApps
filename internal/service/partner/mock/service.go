// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/partner/service.go

// Package mock is a generated GoMock package.
package mock

import (
	partner "gilsaputro/dating-apps/internal/service/partner"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPartnerServiceMethod is a mock of PartnerServiceMethod interface.
type MockPartnerServiceMethod struct {
	ctrl     *gomock.Controller
	recorder *MockPartnerServiceMethodMockRecorder
}

// MockPartnerServiceMethodMockRecorder is the mock recorder for MockPartnerServiceMethod.
type MockPartnerServiceMethodMockRecorder struct {
	mock *MockPartnerServiceMethod
}

// NewMockPartnerServiceMethod creates a new mock instance.
func NewMockPartnerServiceMethod(ctrl *gomock.Controller) *MockPartnerServiceMethod {
	mock := &MockPartnerServiceMethod{ctrl: ctrl}
	mock.recorder = &MockPartnerServiceMethodMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartnerServiceMethod) EXPECT() *MockPartnerServiceMethodMockRecorder {
	return m.recorder
}

// GetCurrentPartner mocks base method.
func (m *MockPartnerServiceMethod) GetCurrentPartner(request partner.PartnerServiceRequest) (partner.PartnerServiceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentPartner", request)
	ret0, _ := ret[0].(partner.PartnerServiceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentPartner indicates an expected call of GetCurrentPartner.
func (mr *MockPartnerServiceMethodMockRecorder) GetCurrentPartner(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentPartner", reflect.TypeOf((*MockPartnerServiceMethod)(nil).GetCurrentPartner), request)
}

// GetListLikedPartner mocks base method.
func (m *MockPartnerServiceMethod) GetListLikedPartner(request partner.PartnerServiceRequest) ([]partner.PartnerServiceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListLikedPartner", request)
	ret0, _ := ret[0].([]partner.PartnerServiceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListLikedPartner indicates an expected call of GetListLikedPartner.
func (mr *MockPartnerServiceMethodMockRecorder) GetListLikedPartner(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListLikedPartner", reflect.TypeOf((*MockPartnerServiceMethod)(nil).GetListLikedPartner), request)
}

// LikePartner mocks base method.
func (m *MockPartnerServiceMethod) LikePartner(request partner.PartnerServiceRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikePartner", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// LikePartner indicates an expected call of LikePartner.
func (mr *MockPartnerServiceMethodMockRecorder) LikePartner(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikePartner", reflect.TypeOf((*MockPartnerServiceMethod)(nil).LikePartner), request)
}

// PassPartner mocks base method.
func (m *MockPartnerServiceMethod) PassPartner(request partner.PartnerServiceRequest) (partner.PartnerServiceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PassPartner", request)
	ret0, _ := ret[0].(partner.PartnerServiceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PassPartner indicates an expected call of PassPartner.
func (mr *MockPartnerServiceMethodMockRecorder) PassPartner(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PassPartner", reflect.TypeOf((*MockPartnerServiceMethod)(nil).PassPartner), request)
}
